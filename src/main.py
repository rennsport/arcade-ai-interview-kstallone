#!/usr/bin/env python3
"""
Main script for Arcade Flow Analyzer

This script demonstrates how to use the arcade_flow_analyzer package.
"""

from arcade_flow_analyzer.extractors import process_flow, save_to_csv
from arcade_flow_analyzer.analysis import summarize_actions
from arcade_flow_analyzer.visualization import generate_flow_image
import os
from datetime import datetime


def create_markdown_report():
    """Create a markdown report with the analysis results"""
    steps_file = 'cache/ai-steps-chain.txt'
    summary_file = 'cache/ai-summary-chain.txt'
    image_file = 'cache/image/generated-image.png'

    missing_files = []
    if not os.path.exists(steps_file):
        missing_files.append(steps_file)
    if not os.path.exists(summary_file):
        missing_files.append(summary_file)
    if not os.path.exists(image_file):
        missing_files.append(image_file)

    if missing_files:
        print(f"Cannot create report - missing files: {missing_files}")
        return None

    with open(steps_file, 'r') as f:
        steps_content = f.read().strip()

    with open(summary_file, 'r') as f:
        summary_content = f.read().strip()

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    markdown_content = f"""# Arcade Flow Analysis Report

*Generated on: {timestamp}*

## User Journey Steps

{steps_content}

## Summary

{summary_content}

## Flow Marketing Visualization (Generated by DALL-E)

I need to get better at prompting DALL-E to generate images that are actually usable.

![Generated Flow Image](cache/image/generated-image.png)

---
*This report was generated by the Arcade Flow Analyzer*

"""

    report_file = f'flow-analysis-report-{timestamp}.md'
    with open(report_file, 'w') as f:
        f.write(markdown_content)

    print(f"Markdown report created: {report_file}")
    return report_file


def main():
    """Main function"""
    print("Arcade Flow Analyzer")
    print("=" * 50)
    print()

    print("Extracting actions from flow.json")
    try:
        result = process_flow("flow.json")
        csv_path = save_to_csv(result, "actions.csv")
        print(f"Flow: {result['name']}")
        print(f"Events: {len(result['events'])}")
        print(f"Saved to: {csv_path}")
    except Exception as e:
        print(f"Error in extraction: {e}")
        return


    print(" Summarizing user journey")
    try:
        summarize_actions()
        print("Summary generated successfully")
    except Exception as e:
        print(f"Error in summarization: {e}")
        return
    
    print("Generating flow visualization")
    try:
        generate_flow_image()
        print("Image generated successfully")
    except Exception as e:
        print(f"Error in image generation: {e}")
        return
    
    # Step 4: Create markdown report
    print("Creating markdown report...")
    try:
        report_file = create_markdown_report()
        if not report_file:
            print("Failed to create report")
    except Exception as e:
        print(f"Error creating report: {e}")
        return
    
    print("Done")

if __name__ == "__main__":
    main()
